{"version":3,"sources":["../src/datasource.js"],"names":["_","GitHubDatasource","instanceSettings","$q","backendSrv","templateSrv","url","type","name","q","withCredentials","jsonData","Object","assign","credentials","oauthToken","clientId","username","headers","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","method","Promise","resolve","reject","undefined","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","then","result","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GitHubDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = 'https://api.github.com';\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    const jsonData = Object.assign({}, instanceSettings.jsonData);\n\n    this.credentials = {\n      oauthToken: jsonData.oauthToken,\n      clientId: jsonData.clientId,\n      username: jsonData.username\n    };\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `token ${this.credentials.oauthToken}`\n    };\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      if(this.credentials.oauthToken !== undefined)\n        resolve({ status: 'success', message: 'GitHub datasource authenticated', title: \"Success\" });\n      else\n        reject({ status: 'error', message: 'Not authenticated' })\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}