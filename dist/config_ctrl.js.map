{"version":3,"sources":["../src/config_ctrl.js"],"names":["GitHubConfigCtrl","$scope","$window","url","username","current","jsonData","clientId","clientSecret","state","params","client_id","client_secret","allow_signup","scope","login","code","openOauthWindow","result","getAccessToken","oauthToken","console","log","allParams","Object","assign","Promise","resolve","reject","keys","map","p","join","opened","open","timer","setInterval","location","search","match","clearInterval","close","err","response","fetch","body","JSON","stringify","headers","method","mode","json","access_token"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAEaA,gB;;AAEX;AACA,kCAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AAAA;;AAC3B,eAAKC,GAAL,GAAW,oBAAX;AACA,eAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaC,QAAb,CAAsBF,QAAtC;AACA,eAAKG,QAAL,GAAgB,KAAKF,OAAL,CAAaC,QAAb,CAAsBC,QAAtB,IAAkC,sBAAlD;AACA,eAAKC,YAAL,GAAoB,KAAKH,OAAL,CAAaC,QAAb,CAAsBE,YAAtB,IAAsC,0CAA1D;AACA,eAAKC,KAAL,GAAa,sCAAb;;AAEA,cAAMC,SAAS;AACbC,uBAAW,KAAKJ,QADH;AAEbK,2BAAe,KAAKJ,YAFP;AAGbK,0BAAc,OAHD;AAIbJ,mBAAO,KAAKA,KAJC;AAKbK,mBAAO;AALM,WAAf;;AAQAb,iBAAOc,KAAP,GAAe,kBAAY;AACzBL,mBAAOM,IAAP,GAAc,MAAM,MAAKC,eAAL,CAAqBhB,MAArB,EAA6BC,OAA7B,EAAsCQ,MAAtC,CAApB;AACA,gBAAMQ,SAAS,MAAM,MAAKC,cAAL,CAAoBT,MAApB,CAArB;AACA,kBAAKL,OAAL,CAAaC,QAAb,CAAsBc,UAAtB,GAAmCF,MAAnC;AACAG,oBAAQC,GAAR,CAAYJ,MAAZ;AACD,WALD;AAOD;;;;0CAEejB,M,EAAQC,O,EAASqB,S,EAAW;AAAA;;AAC1C,gBAAMb,SAASc,OAAOC,MAAP,CAAc,EAAd,EAAkBF,SAAlB,CAAf;AACA,mBAAOb,OAAOE,aAAd;;AAEA,mBAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAMzB,MAAS,OAAKA,GAAd,+BAA2CqB,OAAOK,IAAP,CAAYnB,MAAZ,EAAoBoB,GAApB,CAAwB;AAAA,6BAASC,CAAT,SAAcrB,OAAOqB,CAAP,CAAd;AAAA,eAAxB,EAAmDC,IAAnD,CAAwD,EAAxD,CAAjD;AACA,kBAAMC,SAAS/B,QAAQgC,IAAR,CAAa/B,GAAb,EAAkB,QAAlB,EAA4B,uBAA5B,CAAf;;AAEA,kBAAMgC,QAAQC,YAAY,YAAM;AAC9B,oBAAI;AACF,sBAAMpB,OAAOiB,OAAOI,QAAP,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B,YAA7B,EAA2C,CAA3C,CAAb;AACAC,gCAAcL,KAAd;AACAF,yBAAOQ,KAAP;AACAd,0BAAQX,IAAR;AACD,iBALD,CAKE,OAAM0B,GAAN,EAAW,CAAE,2CAA6C;AAC7D,eAPa,EAOX,GAPW,CAAd;AASD,aAbM,CAAP;AAcD;;;+CAEoBhC,M,EAAQ;AAC3B,gBAAMP,MAAM,uEAAZ;AACA,gBAAMwC,WAAW,MAAMC,MAAMzC,GAAN,EAAW;AAChC0C,oBAAMC,KAAKC,SAAL,CAAerC,MAAf,CAD0B;AAEhCsC,uBAAS;AACP,gCAAgB,kBADT;AAEP,0BAAU;AAFH,eAFuB;AAMhCC,sBAAQ,MANwB;AAOhCC,oBAAM;AAP0B,aAAX,CAAvB;AASA,gBAAMC,OAAO,MAAMR,SAASQ,IAAT,EAAnB;AACA,mBAAOA,KAAKC,YAAZ;AACD","file":"config_ctrl.js","sourcesContent":["import './css/github-login.css!';\n\nexport class GitHubConfigCtrl {\n\n  /** @ngInject */\n  constructor($scope, $window) {\n    this.url = 'https://github.com';\n    this.username = this.current.jsonData.username;\n    this.clientId = this.current.jsonData.clientId || '511f57f0dc004d529286';\n    this.clientSecret = this.current.jsonData.clientSecret || '56da6358190eddc7100f2e3519a1b0d841fb6b38';\n    this.state = 'abc123randomstringgnirtsmodnar321cba';\n\n    const params = {\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      allow_signup: 'false',\n      state: this.state,\n      scope: 'repo'\n    };\n\n    $scope.login = async () => {\n      params.code = await this.openOauthWindow($scope, $window, params);\n      const result = await this.getAccessToken(params);\n      this.current.jsonData.oauthToken = result;\n      console.log(result)\n    };\n    \n  }\n\n  openOauthWindow($scope, $window, allParams) {\n    const params = Object.assign({}, allParams);\n    delete params.client_secret;\n\n    return new Promise((resolve, reject) => {\n      const url = `${this.url}/login/oauth/authorize?${Object.keys(params).map(p => `&${p}=${params[p]}`).join('')}`;\n      const opened = $window.open(url, 'GitHub', 'width=600, height=600');\n\n      const timer = setInterval(() => {\n        try {\n          const code = opened.location.search.match(/code=(.*)&/)[1];\n          clearInterval(timer);\n          opened.close();\n          resolve(code);\n        } catch(err) { /* I don't feel like checking everything */ }\n      }, 500);\n\n    });\n  }\n\n  async getAccessToken(params) {\n    const url = 'https://us-central1-grafana-github-datasource.cloudfunctions.net/http';\n    const response = await fetch(url, {\n      body: JSON.stringify(params),\n      headers: {\n        'content-type': 'application/json',\n        'accept': 'application/json'\n      },\n      method: 'POST',\n      mode: 'cors'\n    });\n    const json = await response.json();\n    return json.access_token;\n  }\n\n}"]}