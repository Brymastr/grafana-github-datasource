{"version":3,"sources":["../src/config_ctrl.js"],"names":["GitHubConfigCtrl","$scope","$window","url","clientId","current","jsonData","state","params","client_id","allow_signup","login","code","openOauthWindow","result","getAccessToken","console","log","Promise","resolve","reject","Object","keys","map","p","join","opened","open","timer","setInterval","location","search","match","clearInterval","close","err","response","fetch","body","JSON","stringify","headers","method","mode","json","access_token"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAaA,gB;;AAEX;AACA,kCAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AAAA;;AAC3B,eAAKC,GAAL,GAAW,oBAAX;AACA,eAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaC,QAAb,CAAsBF,QAAtB,IAAkC,sBAAlD;AACA,eAAKG,KAAL,GAAa,sCAAb;;AAEA,cAAMC,SAAS;AACbC,uBAAW,KAAKL,QADH;AAEbM,0BAAc,OAFD;AAGbH,mBAAO,KAAKA;AAHC,WAAf;;AAMAN,iBAAOU,KAAP,GAAe,kBAAY;AACzBH,mBAAOI,IAAP,GAAc,MAAM,MAAKC,eAAL,CAAqBZ,MAArB,EAA6BC,OAA7B,EAAsCM,MAAtC,CAApB;AACA,gBAAMM,SAAS,MAAM,MAAKC,cAAL,CAAoBP,MAApB,CAArB;AACAQ,oBAAQC,GAAR,CAAYH,MAAZ;AACD,WAJD;AAMD;;;;0CAEeb,M,EAAQC,O,EAASM,M,EAAQ;AAAA;;AACvC,mBAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAMjB,MAAS,OAAKA,GAAd,+BAA2CkB,OAAOC,IAAP,CAAYd,MAAZ,EAAoBe,GAApB,CAAwB;AAAA,6BAASC,CAAT,SAAchB,OAAOgB,CAAP,CAAd;AAAA,eAAxB,EAAmDC,IAAnD,CAAwD,EAAxD,CAAjD;AACA,kBAAMC,SAASxB,QAAQyB,IAAR,CAAaxB,GAAb,EAAkB,QAAlB,EAA4B,uBAA5B,CAAf;;AAEA,kBAAMyB,QAAQC,YAAY,YAAM;AAC9B,oBAAI;AACF,sBAAMjB,OAAOc,OAAOI,QAAP,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B,YAA7B,EAA2C,CAA3C,CAAb;AACAC,gCAAcL,KAAd;AACAF,yBAAOQ,KAAP;AACAf,0BAAQP,IAAR;AACD,iBALD,CAKE,OAAMuB,GAAN,EAAW,CAAE,2CAA6C;AAC7D,eAPa,EAOX,GAPW,CAAd;AASD,aAbM,CAAP;AAcD;;;+CAEoB3B,M,EAAQ;AAC3B,gBAAML,MAAM,uEAAZ;AACA,gBAAMiC,WAAW,MAAMC,MAAMlC,GAAN,EAAW;AAChCmC,oBAAMC,KAAKC,SAAL,CAAehC,MAAf,CAD0B;AAEhCiC,uBAAS;AACP,gCAAgB,kBADT;AAEP,0BAAU;AAFH,eAFuB;AAMhCC,sBAAQ,MANwB;AAOhCC,oBAAM;AAP0B,aAAX,CAAvB;AASA;AACA;AACA,gBAAMC,OAAO,MAAMR,SAASQ,IAAT,EAAnB;AACA,mBAAOA,KAAKC,YAAZ;AACD","file":"config_ctrl.js","sourcesContent":["export class GitHubConfigCtrl {\n\n  /** @ngInject */\n  constructor($scope, $window) {\n    this.url = 'https://github.com';\n    this.clientId = this.current.jsonData.clientId || '511f57f0dc004d529286';\n    this.state = 'abc123randomstringgnirtsmodnar321cba';\n\n    const params = {\n      client_id: this.clientId,\n      allow_signup: 'false',\n      state: this.state,\n    };\n\n    $scope.login = async () => {\n      params.code = await this.openOauthWindow($scope, $window, params);\n      const result = await this.getAccessToken(params);\n      console.log(result)\n    };\n    \n  }\n\n  openOauthWindow($scope, $window, params) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.url}/login/oauth/authorize?${Object.keys(params).map(p => `&${p}=${params[p]}`).join('')}`;\n      const opened = $window.open(url, 'GitHub', 'width=600, height=600');\n\n      const timer = setInterval(() => {\n        try {\n          const code = opened.location.search.match(/code=(.*)&/)[1];\n          clearInterval(timer);\n          opened.close();\n          resolve(code);\n        } catch(err) { /* I don't feel like checking everything */ }\n      }, 500);\n\n    });\n  }\n\n  async getAccessToken(params) {\n    const url = 'https://us-central1-grafana-github-datasource.cloudfunctions.net/http';\n    const response = await fetch(url, {\n      body: JSON.stringify(params),\n      headers: {\n        'content-type': 'application/json',\n        'accept': 'application/json'\n      },\n      method: 'POST',\n      mode: 'cors'\n    });\n    // console.log(response)\n    // return response;\n    const json = await response.json();\n    return json.access_token;\n  }\n\n}"]}